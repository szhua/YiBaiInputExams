package com.yibaieducation.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.yibaieducation.bean.Ti_paper;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TI_PAPER.
*/
public class Ti_paperDao extends AbstractDao<Ti_paper, Long> {

    public static final String TABLENAME = "TI_PAPER";

    /**
     * Properties of entity Ti_paper.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Type = new Property(2, Integer.class, "type", false, "TYPE");
        public final static Property Sku_code = new Property(3, Integer.class, "sku_code", false, "SKU_CODE");
        public final static Property Subject_code = new Property(4, Integer.class, "subject_code", false, "SUBJECT_CODE");
        public final static Property Status = new Property(5, Integer.class, "status", false, "STATUS");
        public final static Property Update_time = new Property(6, String.class, "update_time", false, "UPDATE_TIME");
        public final static Property Total_count = new Property(7, String.class, "total_count", false, "TOTAL_COUNT");
        public final static Property Answer_date = new Property(8, String.class, "answer_date", false, "ANSWER_DATE");
        public final static Property Total_score = new Property(9, String.class, "total_score", false, "TOTAL_SCORE");
        public final static Property Start_time = new Property(10, String.class, "start_time", false, "START_TIME");
        public final static Property Answer_time = new Property(11, String.class, "answer_time", false, "ANSWER_TIME");
        public final static Property Paper_order = new Property(12, Integer.class, "paper_order", false, "PAPER_ORDER");
    };

    private DaoSession daoSession;


    public Ti_paperDao(DaoConfig config) {
        super(config);
    }
    
    public Ti_paperDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TI_PAPER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'TYPE' INTEGER," + // 2: type
                "'SKU_CODE' INTEGER," + // 3: sku_code
                "'SUBJECT_CODE' INTEGER," + // 4: subject_code
                "'STATUS' INTEGER," + // 5: status
                "'UPDATE_TIME' TEXT," + // 6: update_time
                "'TOTAL_COUNT' TEXT," + // 7: total_count
                "'ANSWER_DATE' TEXT," + // 8: answer_date
                "'TOTAL_SCORE' TEXT," + // 9: total_score
                "'START_TIME' TEXT," + // 10: start_time
                "'ANSWER_TIME' TEXT," + // 11: answer_time
                "'PAPER_ORDER' INTEGER);"); // 12: paper_order
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TI_PAPER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Ti_paper entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        Integer sku_code = entity.getSku_code();
        if (sku_code != null) {
            stmt.bindLong(4, sku_code);
        }
 
        Integer subject_code = entity.getSubject_code();
        if (subject_code != null) {
            stmt.bindLong(5, subject_code);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(6, status);
        }
 
        String update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindString(7, update_time);
        }
 
        String total_count = entity.getTotal_count();
        if (total_count != null) {
            stmt.bindString(8, total_count);
        }
 
        String answer_date = entity.getAnswer_date();
        if (answer_date != null) {
            stmt.bindString(9, answer_date);
        }
 
        String total_score = entity.getTotal_score();
        if (total_score != null) {
            stmt.bindString(10, total_score);
        }
 
        String start_time = entity.getStart_time();
        if (start_time != null) {
            stmt.bindString(11, start_time);
        }
 
        String answer_time = entity.getAnswer_time();
        if (answer_time != null) {
            stmt.bindString(12, answer_time);
        }
 
        Integer paper_order = entity.getPaper_order();
        if (paper_order != null) {
            stmt.bindLong(13, paper_order);
        }
    }

    @Override
    protected void attachEntity(Ti_paper entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Ti_paper readEntity(Cursor cursor, int offset) {
        Ti_paper entity = new Ti_paper( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // sku_code
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // subject_code
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // status
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // update_time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // total_count
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // answer_date
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // total_score
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // start_time
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // answer_time
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12) // paper_order
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Ti_paper entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSku_code(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSubject_code(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setUpdate_time(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTotal_count(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAnswer_date(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTotal_score(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStart_time(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAnswer_time(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPaper_order(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Ti_paper entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Ti_paper entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
