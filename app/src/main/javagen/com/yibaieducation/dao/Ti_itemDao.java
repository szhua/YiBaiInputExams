package com.yibaieducation.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.yibaieducation.bean.Ti_item;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TI_ITEM.
*/
public class Ti_itemDao extends AbstractDao<Ti_item, Long> {

    public static final String TABLENAME = "TI_ITEM";

    /**
     * Properties of entity Ti_item.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title_id = new Property(1, Integer.class, "title_id", false, "TITLE_ID");
        public final static Property Item_name = new Property(2, String.class, "item_name", false, "ITEM_NAME");
        public final static Property Answer = new Property(3, String.class, "answer", false, "ANSWER");
        public final static Property Price = new Property(4, String.class, "price", false, "PRICE");
        public final static Property Score = new Property(5, Integer.class, "score", false, "SCORE");
        public final static Property Sort_number = new Property(6, Integer.class, "sort_number", false, "SORT_NUMBER");
    };

    private DaoSession daoSession;


    public Ti_itemDao(DaoConfig config) {
        super(config);
    }
    
    public Ti_itemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TI_ITEM' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TITLE_ID' INTEGER," + // 1: title_id
                "'ITEM_NAME' TEXT," + // 2: item_name
                "'ANSWER' TEXT," + // 3: answer
                "'PRICE' TEXT," + // 4: price
                "'SCORE' INTEGER," + // 5: score
                "'SORT_NUMBER' INTEGER);"); // 6: sort_number
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TI_ITEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Ti_item entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer title_id = entity.getTitle_id();
        if (title_id != null) {
            stmt.bindLong(2, title_id);
        }
 
        String item_name = entity.getItem_name();
        if (item_name != null) {
            stmt.bindString(3, item_name);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(4, answer);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(5, price);
        }
 
        Integer score = entity.getScore();
        if (score != null) {
            stmt.bindLong(6, score);
        }
 
        Integer sort_number = entity.getSort_number();
        if (sort_number != null) {
            stmt.bindLong(7, sort_number);
        }
    }

    @Override
    protected void attachEntity(Ti_item entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Ti_item readEntity(Cursor cursor, int offset) {
        Ti_item entity = new Ti_item( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // title_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // item_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // answer
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // price
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // score
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // sort_number
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Ti_item entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setItem_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAnswer(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrice(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setScore(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setSort_number(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Ti_item entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Ti_item entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
