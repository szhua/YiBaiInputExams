package com.yibaieducation.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.yibaieducation.bean.Ti_account_subs;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TI_ACCOUNT_SUBS.
*/
public class Ti_account_subsDao extends AbstractDao<Ti_account_subs, Long> {

    public static final String TABLENAME = "TI_ACCOUNT_SUBS";

    /**
     * Properties of entity Ti_account_subs.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Sub_name = new Property(1, String.class, "sub_name", false, "SUB_NAME");
        public final static Property Parent_id = new Property(2, Integer.class, "parent_id", false, "PARENT_ID");
        public final static Property Parent_name = new Property(3, String.class, "parent_name", false, "PARENT_NAME");
    };

    private DaoSession daoSession;


    public Ti_account_subsDao(DaoConfig config) {
        super(config);
    }
    
    public Ti_account_subsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TI_ACCOUNT_SUBS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SUB_NAME' TEXT UNIQUE ," + // 1: sub_name
                "'PARENT_ID' INTEGER," + // 2: parent_id
                "'PARENT_NAME' TEXT);"); // 3: parent_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TI_ACCOUNT_SUBS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Ti_account_subs entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sub_name = entity.getSub_name();
        if (sub_name != null) {
            stmt.bindString(2, sub_name);
        }
 
        Integer parent_id = entity.getParent_id();
        if (parent_id != null) {
            stmt.bindLong(3, parent_id);
        }
 
        String parent_name = entity.getParent_name();
        if (parent_name != null) {
            stmt.bindString(4, parent_name);
        }
    }

    @Override
    protected void attachEntity(Ti_account_subs entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Ti_account_subs readEntity(Cursor cursor, int offset) {
        Ti_account_subs entity = new Ti_account_subs( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sub_name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // parent_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // parent_name
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Ti_account_subs entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSub_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParent_id(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setParent_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Ti_account_subs entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Ti_account_subs entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
